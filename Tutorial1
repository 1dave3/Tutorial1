module Tutorial1 where

import PicturesSVG -- needed for the optional chess part
import Test.QuickCheck

-- Exercise 2:

double :: Int -> Int
double x = x + x

square :: Int -> Int
square x = x * x

-- Exercise 3:

isTriple :: Int -> Int -> Int -> Bool
isTriple a b c = (a * a) + (b * b) == (c * c)

-- Exercise 4:

leg1 :: Int -> Int -> Int
leg1 x y = (x * x) - (y * y)

leg2 :: Int -> Int -> Int
leg2 x y = (2 * y * x)

hyp :: Int -> Int -> Int
hyp x y = (x * x) + (y * y)

-- Exercise 5:

prop_triple :: Int -> Int -> Bool
prop_triple x y = isTriple (leg1 x y) (leg2 x y) (hyp x y)

-- Exercise 7:

pic1 :: Picture
pic1 = ((knight `beside` (invert knight)) `above` ((invert knight) `beside` knight))

pic2 :: Picture
pic2 = ((beside knight (invert knight)) `above` ((invert (flipV knight)) `beside` (flipV knight)))

-- Functions --

twoBeside :: Picture -> Picture
twoBeside x = beside x (invert x)

-- Exercise 8:

twoAbove :: Picture -> Picture
twoAbove x = above x (invert x)

fourPictures :: Picture -> Picture
fourPictures x = ((twoAbove bishop) `beside` (twoAbove bishop))

-- Exercise 9:
-- a)

emptyRow :: Picture
emptyRow = (repeatH 4 (beside whiteSquare (blackSquare)))

-- b)

otherEmptyRow :: Picture
otherEmptyRow = (repeatH 4((invert blackSquare) `beside` (whiteSquare)))

-- c)

middleBoard :: Picture
middleBoard = (repeatV 2(above emptyRow (otherEmptyRow)))

-- d)

whiteRow1 :: Picture
whiteRow1 = (beside rook(beside knight(bishop)))

whiteRow2 :: Picture
whiteRow2 = (beside queen(king))

whiteRow :: Picture
whiteRow = ((beside whiteRow1 (beside whiteRow2(flipV whiteRow1))) `over` (otherEmptyRow))

blackRow :: Picture
blackRow = (invert (beside whiteRow1 (beside whiteRow2(flipV whiteRow1))) `over` (emptyRow))

-- e)
pawnRowWhite :: Picture
pawnRowWhite = (repeatH 8 (pawn) `over` (emptyRow)) 

pawnRowBlack :: Picture
pawnRowBlack = (repeatH 8 (invert pawn) `over` (otherEmptyRow)) 

populatedBoard :: Picture
populatedBoard = (above blackRow(above pawnRowBlack(above middleBoard(above pawnRowWhite(whiteRow)))))



